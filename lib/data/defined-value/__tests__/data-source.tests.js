"use strict";

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _dataSource = _interopRequireDefault(require("../data-source"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_config.default.loadJs({
  ROCK: {
    API_URL: 'https://apollosrock.newspring.cc/api',
    API_TOKEN: 'some-rock-token',
    IMAGE_URL: 'https://apollosrock.newspring.cc/GetImage.ashx'
  }
});

describe('Defined Value', () => {
  // Parse Identifier parameter
  it('parses identifer as a guid', () => {
    const dataSource = new _dataSource.default();
    const id = 'f6bc95f5-057b-4313-8946-75381d7c5129';
    const identifierType = dataSource.getIdentifierType(id);
    expect(identifierType).toEqual({
      type: 'guid',
      value: id,
      query: `Guid eq (guid'${id}')`
    });
  });
  it('parses identifer as an integer', () => {
    const dataSource = new _dataSource.default();
    const id = '999';
    const identifierType = dataSource.getIdentifierType(id);
    expect(identifierType).toEqual({
      type: 'int',
      value: id,
      query: `Id eq ${id}`
    });
  });
  it('parses identifer as a custom identifer', () => {
    const dataSource = new _dataSource.default();
    const id = 'some-custom-identifer';
    const identifierType = dataSource.getIdentifierType(id);
  }); // Run the getValueBYBlablablablab

  it('gets a defined value from a valid guid or integer id', async () => {
    const dataSource = new _dataSource.default();
    const id = '999';
    dataSource.get = jest.fn(() => Promise.resolve([{
      Id: 999,
      Value: 'Foo'
    }]));
    const result = dataSource.getDefinedValueByIdentifier(id);
    expect(dataSource.get).toMatchSnapshot();
  });
  it('returns null if no valid id or guid is passed', async () => {
    const dataSource = new _dataSource.default();
    const id = 'some-random-identifier';
    const result = await dataSource.getDefinedValueByIdentifier(id);
    expect(result).toEqual(null);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kYXRhL2RlZmluZWQtdmFsdWUvX190ZXN0c19fL2RhdGEtc291cmNlLnRlc3RzLmpzIl0sIm5hbWVzIjpbIkFwb2xsb3NDb25maWciLCJsb2FkSnMiLCJST0NLIiwiQVBJX1VSTCIsIkFQSV9UT0tFTiIsIklNQUdFX1VSTCIsImRlc2NyaWJlIiwiaXQiLCJkYXRhU291cmNlIiwiRGVmaW5lZFZhbHVlIiwiaWQiLCJpZGVudGlmaWVyVHlwZSIsImdldElkZW50aWZpZXJUeXBlIiwiZXhwZWN0IiwidG9FcXVhbCIsInR5cGUiLCJ2YWx1ZSIsInF1ZXJ5IiwiZ2V0IiwiamVzdCIsImZuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJJZCIsIlZhbHVlIiwicmVzdWx0IiwiZ2V0RGVmaW5lZFZhbHVlQnlJZGVudGlmaWVyIiwidG9NYXRjaFNuYXBzaG90Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBRUFBLGdCQUFjQyxNQUFkLENBQXFCO0FBQ2pCQyxFQUFBQSxJQUFJLEVBQUU7QUFDRkMsSUFBQUEsT0FBTyxFQUFFLHNDQURQO0FBRUZDLElBQUFBLFNBQVMsRUFBRSxpQkFGVDtBQUdGQyxJQUFBQSxTQUFTLEVBQUU7QUFIVDtBQURXLENBQXJCOztBQVFBQyxRQUFRLENBQUMsZUFBRCxFQUFrQixNQUFNO0FBQzVCO0FBQ0FDLEVBQUFBLEVBQUUsQ0FBQyw0QkFBRCxFQUErQixNQUFNO0FBQ25DLFVBQU1DLFVBQVUsR0FBRyxJQUFJQyxtQkFBSixFQUFuQjtBQUNBLFVBQU1DLEVBQUUsR0FBRyxzQ0FBWDtBQUNBLFVBQU1DLGNBQWMsR0FBR0gsVUFBVSxDQUFDSSxpQkFBWCxDQUE2QkYsRUFBN0IsQ0FBdkI7QUFFQUcsSUFBQUEsTUFBTSxDQUFDRixjQUFELENBQU4sQ0FBdUJHLE9BQXZCLENBQStCO0FBQUVDLE1BQUFBLElBQUksRUFBRSxNQUFSO0FBQWdCQyxNQUFBQSxLQUFLLEVBQUVOLEVBQXZCO0FBQTJCTyxNQUFBQSxLQUFLLEVBQUcsaUJBQWdCUCxFQUFHO0FBQXRELEtBQS9CO0FBQ0gsR0FOQyxDQUFGO0FBUUFILEVBQUFBLEVBQUUsQ0FBQyxnQ0FBRCxFQUFtQyxNQUFNO0FBQ3ZDLFVBQU1DLFVBQVUsR0FBRyxJQUFJQyxtQkFBSixFQUFuQjtBQUNBLFVBQU1DLEVBQUUsR0FBRyxLQUFYO0FBQ0EsVUFBTUMsY0FBYyxHQUFHSCxVQUFVLENBQUNJLGlCQUFYLENBQTZCRixFQUE3QixDQUF2QjtBQUVBRyxJQUFBQSxNQUFNLENBQUNGLGNBQUQsQ0FBTixDQUF1QkcsT0FBdkIsQ0FBK0I7QUFBRUMsTUFBQUEsSUFBSSxFQUFFLEtBQVI7QUFBZUMsTUFBQUEsS0FBSyxFQUFFTixFQUF0QjtBQUEwQk8sTUFBQUEsS0FBSyxFQUFHLFNBQVFQLEVBQUc7QUFBN0MsS0FBL0I7QUFDSCxHQU5DLENBQUY7QUFRQUgsRUFBQUEsRUFBRSxDQUFDLHdDQUFELEVBQTJDLE1BQU07QUFDL0MsVUFBTUMsVUFBVSxHQUFHLElBQUlDLG1CQUFKLEVBQW5CO0FBQ0EsVUFBTUMsRUFBRSxHQUFHLHVCQUFYO0FBQ0EsVUFBTUMsY0FBYyxHQUFHSCxVQUFVLENBQUNJLGlCQUFYLENBQTZCRixFQUE3QixDQUF2QjtBQUNILEdBSkMsQ0FBRixDQWxCNEIsQ0F5QjVCOztBQUNBSCxFQUFBQSxFQUFFLENBQUMsc0RBQUQsRUFBeUQsWUFBWTtBQUNuRSxVQUFNQyxVQUFVLEdBQUcsSUFBSUMsbUJBQUosRUFBbkI7QUFDQSxVQUFNQyxFQUFFLEdBQUcsS0FBWDtBQUVBRixJQUFBQSxVQUFVLENBQUNVLEdBQVgsR0FBaUJDLElBQUksQ0FBQ0MsRUFBTCxDQUFRLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQixDQUFDO0FBQUVDLE1BQUFBLEVBQUUsRUFBRSxHQUFOO0FBQVdDLE1BQUFBLEtBQUssRUFBRTtBQUFsQixLQUFELENBQWhCLENBQWQsQ0FBakI7QUFFQSxVQUFNQyxNQUFNLEdBQUdqQixVQUFVLENBQUNrQiwyQkFBWCxDQUF1Q2hCLEVBQXZDLENBQWY7QUFFQUcsSUFBQUEsTUFBTSxDQUFDTCxVQUFVLENBQUNVLEdBQVosQ0FBTixDQUF1QlMsZUFBdkI7QUFDSCxHQVRDLENBQUY7QUFXQXBCLEVBQUFBLEVBQUUsQ0FBQywrQ0FBRCxFQUFrRCxZQUFZO0FBQzVELFVBQU1DLFVBQVUsR0FBRyxJQUFJQyxtQkFBSixFQUFuQjtBQUNBLFVBQU1DLEVBQUUsR0FBRyx3QkFBWDtBQUNBLFVBQU1lLE1BQU0sR0FBRyxNQUFNakIsVUFBVSxDQUFDa0IsMkJBQVgsQ0FBdUNoQixFQUF2QyxDQUFyQjtBQUVBRyxJQUFBQSxNQUFNLENBQUNZLE1BQUQsQ0FBTixDQUFlWCxPQUFmLENBQXVCLElBQXZCO0FBQ0gsR0FOQyxDQUFGO0FBT0gsQ0E1Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBcG9sbG9zQ29uZmlnIGZyb20gJ0BhcG9sbG9zcHJvamVjdC9jb25maWcnO1xuaW1wb3J0IERlZmluZWRWYWx1ZSBmcm9tICcuLi9kYXRhLXNvdXJjZSc7XG5cbkFwb2xsb3NDb25maWcubG9hZEpzKHtcbiAgICBST0NLOiB7XG4gICAgICAgIEFQSV9VUkw6ICdodHRwczovL2Fwb2xsb3Nyb2NrLm5ld3NwcmluZy5jYy9hcGknLFxuICAgICAgICBBUElfVE9LRU46ICdzb21lLXJvY2stdG9rZW4nLFxuICAgICAgICBJTUFHRV9VUkw6ICdodHRwczovL2Fwb2xsb3Nyb2NrLm5ld3NwcmluZy5jYy9HZXRJbWFnZS5hc2h4JyxcbiAgICB9LFxufSk7XG5cbmRlc2NyaWJlKCdEZWZpbmVkIFZhbHVlJywgKCkgPT4ge1xuICAgIC8vIFBhcnNlIElkZW50aWZpZXIgcGFyYW1ldGVyXG4gICAgaXQoJ3BhcnNlcyBpZGVudGlmZXIgYXMgYSBndWlkJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhU291cmNlID0gbmV3IERlZmluZWRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBpZCA9ICdmNmJjOTVmNS0wNTdiLTQzMTMtODk0Ni03NTM4MWQ3YzUxMjknO1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyVHlwZSA9IGRhdGFTb3VyY2UuZ2V0SWRlbnRpZmllclR5cGUoaWQpO1xuXG4gICAgICAgIGV4cGVjdChpZGVudGlmaWVyVHlwZSkudG9FcXVhbCh7IHR5cGU6ICdndWlkJywgdmFsdWU6IGlkLCBxdWVyeTogYEd1aWQgZXEgKGd1aWQnJHtpZH0nKWAgfSk7XG4gICAgfSk7XG5cbiAgICBpdCgncGFyc2VzIGlkZW50aWZlciBhcyBhbiBpbnRlZ2VyJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhU291cmNlID0gbmV3IERlZmluZWRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBpZCA9ICc5OTknO1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyVHlwZSA9IGRhdGFTb3VyY2UuZ2V0SWRlbnRpZmllclR5cGUoaWQpO1xuXG4gICAgICAgIGV4cGVjdChpZGVudGlmaWVyVHlwZSkudG9FcXVhbCh7IHR5cGU6ICdpbnQnLCB2YWx1ZTogaWQsIHF1ZXJ5OiBgSWQgZXEgJHtpZH1gIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3BhcnNlcyBpZGVudGlmZXIgYXMgYSBjdXN0b20gaWRlbnRpZmVyJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhU291cmNlID0gbmV3IERlZmluZWRWYWx1ZSgpO1xuICAgICAgICBjb25zdCBpZCA9ICdzb21lLWN1c3RvbS1pZGVudGlmZXInO1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyVHlwZSA9IGRhdGFTb3VyY2UuZ2V0SWRlbnRpZmllclR5cGUoaWQpO1xuICAgIH0pO1xuXG5cbiAgICAvLyBSdW4gdGhlIGdldFZhbHVlQllCbGFibGFibGFibGFiXG4gICAgaXQoJ2dldHMgYSBkZWZpbmVkIHZhbHVlIGZyb20gYSB2YWxpZCBndWlkIG9yIGludGVnZXIgaWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGFTb3VyY2UgPSBuZXcgRGVmaW5lZFZhbHVlKCk7XG4gICAgICAgIGNvbnN0IGlkID0gJzk5OSdcblxuICAgICAgICBkYXRhU291cmNlLmdldCA9IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKFt7IElkOiA5OTksIFZhbHVlOiAnRm9vJyB9XSkpO1xuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGRhdGFTb3VyY2UuZ2V0RGVmaW5lZFZhbHVlQnlJZGVudGlmaWVyKGlkKTtcblxuICAgICAgICBleHBlY3QoZGF0YVNvdXJjZS5nZXQpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3JldHVybnMgbnVsbCBpZiBubyB2YWxpZCBpZCBvciBndWlkIGlzIHBhc3NlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YVNvdXJjZSA9IG5ldyBEZWZpbmVkVmFsdWUoKTtcbiAgICAgICAgY29uc3QgaWQgPSAnc29tZS1yYW5kb20taWRlbnRpZmllcidcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZGF0YVNvdXJjZS5nZXREZWZpbmVkVmFsdWVCeUlkZW50aWZpZXIoaWQpO1xuXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobnVsbCk7XG4gICAgfSk7XG59KTsiXX0=