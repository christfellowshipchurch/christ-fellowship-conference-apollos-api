"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dataConnectorRock = require("@apollosproject/data-connector-rock");

var _serverCore = require("@apollosproject/server-core");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _lodash = require("lodash");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createVideoUrlFromGuid = uri => uri.split('-').length === 5 ? `${_config.default.ROCK.FILE_URL}?guid=${uri}` : _dataConnectorRock.Utils.enforceProtocol(uri);

const resolver = {
  WebsiteContentItem: { ..._dataConnectorRock.ContentItem.resolver.ContentItem,
    title: ({
      title,
      attributeValues
    }, args, context) => {
      const titleOverride = (0, _lodash.get)(attributeValues, 'titleOverride.value', '');
      return titleOverride === '' ? title : titleOverride;
    },
    videos: (root, args, {
      dataSources: {
        ContentItem
      }
    }) => {
      const videos = ContentItem.getVideos(root);
      return videos.map(video => {
        video.sources = video.sources.map(sources => {
          sources.uri = createVideoUrlFromGuid(sources.uri);
          return sources;
        });
        return video;
      });
    },
    contentLayout: async ({
      attributeValues
    }, args, context) => {
      const definedValueGuid = (0, _lodash.get)(attributeValues, 'contentLayout.value', '');
      const definedValue = await context.dataSources.DefinedValue.getDefinedValueByIdentifier(definedValueGuid);
      return definedValue.value;
    },
    imageAlt: ({
      attributeValues
    }, args, context) => (0, _lodash.get)(attributeValues, 'imageAlt.value', ''),
    imageRatio: async ({
      attributeValues
    }, args, context) => {
      const definedValueGuid = (0, _lodash.get)(attributeValues, 'imageRatio.value', '');
      const definedValue = await context.dataSources.DefinedValue.getDefinedValueByIdentifier(definedValueGuid);
      return definedValue.value;
    },
    callsToAction: ({
      attributeValues
    }, args, context) => {
      console.log({
        attributeValues
      });
      const cta = (0, _lodash.get)(attributeValues, 'callsToAction.value', null);
      return cta ? (0, _utils.parseRockKeyValuePairs)(cta, 'call', 'action') : [];
    },
    target: ({
      attributeValues
    }, args, context) => (0, _lodash.lowerCase)((0, _lodash.get)(attributeValues, 'openLinksInNewTab.value', 'false')) === 'true' ? '_blank' : '',
    subtitle: ({
      attributeValues
    }) => (0, _lodash.get)(attributeValues, 'subtitle.value', null),
    buttonColor: ({
      attributeValues
    }) => (0, _lodash.get)(attributeValues, 'buttonColor.value', null),
    backgroundColor: ({
      attributeValues
    }) => (0, _lodash.get)(attributeValues, 'backgroundColor.value', null)
  }
};

var _default = (0, _serverCore.schemaMerge)(resolver, _dataConnectorRock.ContentItem);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhL3dlYnNpdGUtY29udGVudC1pdGVtL3Jlc29sdmVyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVZpZGVvVXJsRnJvbUd1aWQiLCJ1cmkiLCJzcGxpdCIsImxlbmd0aCIsIkFwb2xsb3NDb25maWciLCJST0NLIiwiRklMRV9VUkwiLCJVdGlscyIsImVuZm9yY2VQcm90b2NvbCIsInJlc29sdmVyIiwiV2Vic2l0ZUNvbnRlbnRJdGVtIiwiQ29udGVudEl0ZW0iLCJ0aXRsZSIsImF0dHJpYnV0ZVZhbHVlcyIsImFyZ3MiLCJjb250ZXh0IiwidGl0bGVPdmVycmlkZSIsInZpZGVvcyIsInJvb3QiLCJkYXRhU291cmNlcyIsImdldFZpZGVvcyIsIm1hcCIsInZpZGVvIiwic291cmNlcyIsImNvbnRlbnRMYXlvdXQiLCJkZWZpbmVkVmFsdWVHdWlkIiwiZGVmaW5lZFZhbHVlIiwiRGVmaW5lZFZhbHVlIiwiZ2V0RGVmaW5lZFZhbHVlQnlJZGVudGlmaWVyIiwidmFsdWUiLCJpbWFnZUFsdCIsImltYWdlUmF0aW8iLCJjYWxsc1RvQWN0aW9uIiwiY29uc29sZSIsImxvZyIsImN0YSIsInRhcmdldCIsInN1YnRpdGxlIiwiYnV0dG9uQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7OztBQUVBLE1BQU1BLHNCQUFzQixHQUFJQyxHQUFELElBQzNCQSxHQUFHLENBQUNDLEtBQUosQ0FBVSxHQUFWLEVBQWVDLE1BQWYsS0FBMEIsQ0FBMUIsR0FDTyxHQUFFQyxnQkFBY0MsSUFBZCxDQUFtQkMsUUFBUyxTQUFRTCxHQUFJLEVBRGpELEdBRU1NLHlCQUFNQyxlQUFOLENBQXNCUCxHQUF0QixDQUhWOztBQUtBLE1BQU1RLFFBQVEsR0FBRztBQUNiQyxFQUFBQSxrQkFBa0IsRUFBRSxFQUNoQixHQUFHQywrQkFBWUYsUUFBWixDQUFxQkUsV0FEUjtBQUVoQkMsSUFB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LElBQUFBLFFBQVEsRUFBRSxDQUFDO0FBQUV4QixNQUFBQTtBQUFGLEtBQUQsS0FBeUIsaUJBQUlBLGVBQUosRUFBcUIsZ0JBQXJCLEVBQXVDLElBQXZDLENBL0NuQjtBQWdEaEJ5QixJQUFBQSxXQUFXLEVBQUUsQ0FBQztBQUFFekIsTUFBQUE7QUFBRixLQUFELEtBQXlCLGlCQUFJQSxlQUFKLEVBQXFCLG1CQUFyQixFQUEwQyxJQUExQyxDQWhEdEI7QUFpRGhCMEIsSUFBQUEsZUFBZSxFQUFFLENBQUM7QUFBRTFCLE1BQUFBO0FBQUYsS0FBRCxLQUF5QixpQkFBSUEsZUFBSixFQUFxQix1QkFBckIsRUFBOEMsSUFBOUM7QUFqRDFCO0FBRFAsQ0FBakI7O2VBdURlLDZCQUFZSixRQUFaLEVBQXNCRSw4QkFBdEIsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnRlbnRJdGVtLCBVdGlscyB9IGZyb20gJ0BhcG9sbG9zcHJvamVjdC9kYXRhLWNvbm5lY3Rvci1yb2NrJ1xuaW1wb3J0IHsgc2NoZW1hTWVyZ2UgfSBmcm9tICdAYXBvbGxvc3Byb2plY3Qvc2VydmVyLWNvcmUnXG5pbXBvcnQgQXBvbGxvc0NvbmZpZyBmcm9tICdAYXBvbGxvc3Byb2plY3QvY29uZmlnJ1xuaW1wb3J0IHtcbiAgICBnZXQsIGxvd2VyQ2FzZVxufSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgeyBwYXJzZVJvY2tLZXlWYWx1ZVBhaXJzIH0gZnJvbSAnLi4vdXRpbHMnXG5cbmNvbnN0IGNyZWF0ZVZpZGVvVXJsRnJvbUd1aWQgPSAodXJpKSA9PlxuICAgIHVyaS5zcGxpdCgnLScpLmxlbmd0aCA9PT0gNVxuICAgICAgICA/IGAke0Fwb2xsb3NDb25maWcuUk9DSy5GSUxFX1VSTH0/Z3VpZD0ke3VyaX1gXG4gICAgICAgIDogVXRpbHMuZW5mb3JjZVByb3RvY29sKHVyaSk7XG5cbmNvbnN0IHJlc29sdmVyID0ge1xuICAgIFdlYnNpdGVDb250ZW50SXRlbToge1xuICAgICAgICAuLi5Db250ZW50SXRlbS5yZXNvbHZlci5Db250ZW50SXRlbSxcbiAgICAgICAgdGl0bGU6ICh7IHRpdGxlLCBhdHRyaWJ1dGVWYWx1ZXMgfSwgYXJncywgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGl0bGVPdmVycmlkZSA9IGdldChhdHRyaWJ1dGVWYWx1ZXMsICd0aXRsZU92ZXJyaWRlLnZhbHVlJywgJycpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGl0bGVPdmVycmlkZSA9PT0gJydcbiAgICAgICAgICAgICAgICA/IHRpdGxlXG4gICAgICAgICAgICAgICAgOiB0aXRsZU92ZXJyaWRlO1xuICAgICAgICB9LFxuICAgICAgICB2aWRlb3M6IChyb290LCBhcmdzLCB7IGRhdGFTb3VyY2VzOiB7IENvbnRlbnRJdGVtIH0gfSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmlkZW9zID0gQ29udGVudEl0ZW0uZ2V0VmlkZW9zKHJvb3QpO1xuXG4gICAgICAgICAgICByZXR1cm4gdmlkZW9zLm1hcCgodmlkZW8pID0+IHtcbiAgICAgICAgICAgICAgICB2aWRlby5zb3VyY2VzID0gdmlkZW8uc291cmNlcy5tYXAoKHNvdXJjZXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlcy51cmkgPSBjcmVhdGVWaWRlb1VybEZyb21HdWlkKHNvdXJjZXMudXJpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlcztcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB2aWRlbztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBjb250ZW50TGF5b3V0OiBhc3luYyAoeyBhdHRyaWJ1dGVWYWx1ZXMgfSwgYXJncywgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVmaW5lZFZhbHVlR3VpZCA9IGdldChhdHRyaWJ1dGVWYWx1ZXMsICdjb250ZW50TGF5b3V0LnZhbHVlJywgJycpO1xuICAgICAgICAgICAgY29uc3QgZGVmaW5lZFZhbHVlID0gYXdhaXQgY29udGV4dC5kYXRhU291cmNlcy5EZWZpbmVkVmFsdWUuZ2V0RGVmaW5lZFZhbHVlQnlJZGVudGlmaWVyKGRlZmluZWRWYWx1ZUd1aWQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmaW5lZFZhbHVlLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBpbWFnZUFsdDogKHsgYXR0cmlidXRlVmFsdWVzIH0sIGFyZ3MsIGNvbnRleHQpID0+IGdldChhdHRyaWJ1dGVWYWx1ZXMsICdpbWFnZUFsdC52YWx1ZScsICcnKSxcbiAgICAgICAgaW1hZ2VSYXRpbzogYXN5bmMgKHsgYXR0cmlidXRlVmFsdWVzIH0sIGFyZ3MsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluZWRWYWx1ZUd1aWQgPSBnZXQoYXR0cmlidXRlVmFsdWVzLCAnaW1hZ2VSYXRpby52YWx1ZScsICcnKTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluZWRWYWx1ZSA9IGF3YWl0IGNvbnRleHQuZGF0YVNvdXJjZXMuRGVmaW5lZFZhbHVlLmdldERlZmluZWRWYWx1ZUJ5SWRlbnRpZmllcihkZWZpbmVkVmFsdWVHdWlkKTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlZmluZWRWYWx1ZS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbHNUb0FjdGlvbjogKHsgYXR0cmlidXRlVmFsdWVzIH0sIGFyZ3MsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgYXR0cmlidXRlVmFsdWVzIH0pXG5cbiAgICAgICAgICAgIGNvbnN0IGN0YSA9IGdldChhdHRyaWJ1dGVWYWx1ZXMsICdjYWxsc1RvQWN0aW9uLnZhbHVlJywgbnVsbCk7XG5cbiAgICAgICAgICAgIHJldHVybiBjdGFcbiAgICAgICAgICAgICAgICA/IHBhcnNlUm9ja0tleVZhbHVlUGFpcnMoY3RhLCAnY2FsbCcsICdhY3Rpb24nKVxuICAgICAgICAgICAgICAgIDogW11cbiAgICAgICAgfSxcbiAgICAgICAgdGFyZ2V0OiAoeyBhdHRyaWJ1dGVWYWx1ZXMgfSwgYXJncywgY29udGV4dCkgPT5cbiAgICAgICAgICAgIGxvd2VyQ2FzZShnZXQoYXR0cmlidXRlVmFsdWVzLCAnb3BlbkxpbmtzSW5OZXdUYWIudmFsdWUnLCAnZmFsc2UnKSkgPT09ICd0cnVlJ1xuICAgICAgICAgICAgICAgID8gJ19ibGFuaydcbiAgICAgICAgICAgICAgICA6ICcnLFxuICAgICAgICBzdWJ0aXRsZTogKHsgYXR0cmlidXRlVmFsdWVzIH0pID0+IGdldChhdHRyaWJ1dGVWYWx1ZXMsICdzdWJ0aXRsZS52YWx1ZScsIG51bGwpLFxuICAgICAgICBidXR0b25Db2xvcjogKHsgYXR0cmlidXRlVmFsdWVzIH0pID0+IGdldChhdHRyaWJ1dGVWYWx1ZXMsICdidXR0b25Db2xvci52YWx1ZScsIG51bGwpLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICh7IGF0dHJpYnV0ZVZhbHVlcyB9KSA9PiBnZXQoYXR0cmlidXRlVmFsdWVzLCAnYmFja2dyb3VuZENvbG9yLnZhbHVlJywgbnVsbClcblxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgc2NoZW1hTWVyZ2UocmVzb2x2ZXIsIENvbnRlbnRJdGVtKTtcbiJdfQ==