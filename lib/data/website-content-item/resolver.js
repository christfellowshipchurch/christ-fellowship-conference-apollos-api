"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dataConnectorRock = require("@apollosproject/data-connector-rock");

var _serverCore = require("@apollosproject/server-core");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _lodash = require("lodash");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createVideoUrlFromGuid = uri => uri.split('-').length === 5 ? `${_config.default.ROCK.FILE_URL}?guid=${uri}` : _dataConnectorRock.Utils.enforceProtocol(uri);

const resolver = {
  WebsiteContentItem: { ..._dataConnectorRock.ContentItem.resolver.ContentItem,
    title: ({
      title,
      attributeValues
    }, args, context) => {
      const titleOverride = (0, _lodash.get)(attributeValues, 'titleOverride.value', '');
      return titleOverride === '' ? title : titleOverride;
    },
    videos: (root, args, {
      dataSources: {
        ContentItem
      }
    }) => {
      const videos = ContentItem.getVideos(root);
      return videos.map(video => {
        video.sources = video.sources.map(sources => {
          sources.uri = createVideoUrlFromGuid(sources.uri);
          return sources;
        });
        return video;
      });
    },
    contentLayout: async ({
      attributeValues
    }, args, context) => {
      const definedValueGuid = (0, _lodash.get)(attributeValues, 'contentLayout.value', '');
      const definedValue = await context.dataSources.DefinedValue.getDefinedValueByIdentifier(definedValueGuid);
      return definedValue.value;
    },
    imageAlt: ({
      attributeValues
    }, args, context) => (0, _lodash.get)(attributeValues, 'imageAlt.value', ''),
    imageRatio: async ({
      attributeValues
    }, args, context) => {
      const definedValueGuid = (0, _lodash.get)(attributeValues, 'imageRatio.value', '');
      const definedValue = await context.dataSources.DefinedValue.getDefinedValueByIdentifier(definedValueGuid);
      return definedValue.value;
    },
    callsToAction: ({
      attributeValues
    }, args, context) => {
      const cta = (0, _lodash.get)(attributeValues, 'callsToAction.value', null);
      return cta ? (0, _utils.parseRockKeyValuePairs)(cta, 'call', 'action') : [];
    },
    target: ({
      attributeValues
    }, args, context) => (0, _lodash.lowerCase)((0, _lodash.get)(attributeValues, 'openLinksInNewTab.value', 'false')) === 'true' ? '_blank' : ''
  }
};

var _default = (0, _serverCore.schemaMerge)(resolver, _dataConnectorRock.ContentItem);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhL3dlYnNpdGUtY29udGVudC1pdGVtL3Jlc29sdmVyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVZpZGVvVXJsRnJvbUd1aWQiLCJ1cmkiLCJzcGxpdCIsImxlbmd0aCIsIkFwb2xsb3NDb25maWciLCJST0NLIiwiRklMRV9VUkwiLCJVdGlscyIsImVuZm9yY2VQcm90b2NvbCIsInJlc29sdmVyIiwiV2Vic2l0ZUNvbnRlbnRJdGVtIiwiQ29udGVudEl0ZW0iLCJ0aXRsZSIsImF0dHJpYnV0ZVZhbHVlcyIsImFyZ3MiLCJjb250ZXh0IiwidGl0bGVPdmVycmlkZSIsInZpZGVvcyIsInJvb3QiLCJkYXRhU291cmNlcyIsImdldFZpZGVvcyIsIm1hcCIsInZpZGVvIiwic291cmNlcyIsImNvbnRlbnRMYXlvdXQiLCJkZWZpbmVkVmFsdWVHdWlkIiwiZGVmaW5lZFZhbHVlIiwiRGVmaW5lZFZhbHVlIiwiZ2V0RGVmaW5lZFZhbHVlQnlJZGVudGlmaWVyIiwidmFsdWUiLCJpbWFnZUFsdCIsImltYWdlUmF0aW8iLCJjYWxsc1RvQWN0aW9uIiwiY3RhIiwidGFyZ2V0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0E7Ozs7QUFFQSxNQUFNQSxzQkFBc0IsR0FBSUMsR0FBRCxJQUMzQkEsR0FBRyxDQUFDQyxLQUFKLENBQVUsR0FBVixFQUFlQyxNQUFmLEtBQTBCLENBQTFCLEdBQ08sR0FBRUMsZ0JBQWNDLElBQWQsQ0FBbUJDLFFBQVMsU0FBUUwsR0FBSSxFQURqRCxHQUVNTSx5QkFBTUMsZUFBTixDQUFzQlAsR0FBdEIsQ0FIVjs7QUFLQSxNQUFNUSxRQUFRLEdBQUc7QUFDYkMsRUFBQUEsa0JBQWtCLEVBQUUsRUFDaEIsR0FBR0MsK0JBQVlGLFFBQVosQ0FBcUJFLFdBRFI7QUFFaEJDLElBQUFBLEtBQUssRUFBRSxDQUFDO0FBQUVBLE1BQUFBLEtBQUY7QUFBU0MsTUFBQUE7QUFBVCxLQUFELEVBQTZCQyxJQUE3QixFQUFtQ0MsT0FBbkMsS0FBK0M7QUFDbEQsWUFBTUMsYUFBYSxHQUFHLGlCQUFJSCxlQUFKLEVBQXFCLHFCQUFyQixFQUE0QyxFQUE1QyxDQUF0QjtBQUVBLGFBQU9HLGFBQWEsS0FBSyxFQUFsQixHQUNESixLQURDLEdBRURJLGFBRk47QUFHSCxLQVJlO0FBU2hCQyxJQUFBQSxNQUFNLEVBQUUsQ0FBQ0MsSUFBRCxFQUFPSixJQUFQLEVBQWE7QUFBRUssTUFBQUEsV0FBVyxFQUFFO0FBQUVSLFFBQUFBO0FBQUY7QUFBZixLQUFiLEtBQWtEO0FBQ3RELFlBQU1NLE1BQU0sR0FBR04sV0FBVyxDQUFDUyxTQUFaLENBQXNCRixJQUF0QixDQUFmO0FBRUEsYUFBT0QsTUFBTSxDQUFDSSxHQUFQLENBQVlDLEtBQUQsSUFBVztBQUN6QkEsUUFBQUEsS0FBSyxDQUFDQyxPQUFOLEdBQWdCRCxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsR0FBZCxDQUFtQkUsT0FBRCxJQUFhO0FBQzNDQSxVQUFBQSxPQUFPLENBQUN0QixHQUFSLEdBQWNELHNCQUFzQixDQUFDdUIsT0FBTyxDQUFDdEIsR0FBVCxDQUFwQztBQUNBLGlCQUFPc0IsT0FBUDtBQUNILFNBSGUsQ0FBaEI7QUFLQSxlQUFPRCxLQUFQO0FBQ0gsT0FQTSxDQUFQO0FBUUgsS0FwQmU7QUFxQmhCRSxJQUFBQSxhQUFhLEVBQUUsT0FBTztBQUFFWCxNQUFBQTtBQUFGLEtBQVAsRUFBNEJDLElBQTVCLEVBQWtDQyxPQUFsQyxLQUE4QztBQUN6RCxZQUFNVSxnQkFBZ0IsR0FBRyxpQkFBSVosZUFBSixFQUFxQixxQkFBckIsRUFBNEMsRUFBNUMsQ0FBekI7QUFDQSxZQUFNYSxZQUFZLEdBQUcsTUFBTVgsT0FBTyxDQUFDSSxXQUFSLENBQW9CUSxZQUFwQixDQUFpQ0MsMkJBQWpDLENBQTZESCxnQkFBN0QsQ0FBM0I7QUFFQSxhQUFPQyxZQUFZLENBQUNHLEtBQXBCO0FBQ0gsS0ExQmU7QUEyQmhCQyxJQUFBQSxRQUFRLEVBQUUsQ0FBQztBQUFFakIsTUFBQUE7QUFBRixLQUFELEVBQXNCQyxJQUF0QixFQUE0QkMsT0FBNUIsS0FBd0MsaUJBQUlGLGVBQUosRUFBcUIsZ0JBQXJCLEVBQXVDLEVBQXZDLENBM0JsQztBQTRCaEJrQixJQUFBQSxVQUFVLEVBQUUsT0FBTztBQUFFbEIsTUFBQUE7QUFBRixLQUFQLEVBQTRCQyxJQUE1QixFQUFrQ0MsT0FBbEMsS0FBOEM7QUFDdEQsWUFBTVUsZ0JBQWdCLEdBQUcsaUJBQUlaLGVBQUosRUFBcUIsa0JBQXJCLEVBQXlDLEVBQXpDLENBQXpCO0FBQ0EsWUFBTWEsWUFBWSxHQUFHLE1BQU1YLE9BQU8sQ0FBQ0ksV0FBUixDQUFvQlEsWUFBcEIsQ0FBaUNDLDJCQUFqQyxDQUE2REgsZ0JBQTdELENBQTNCO0FBRUEsYUFBT0MsWUFBWSxDQUFDRyxLQUFwQjtBQUNILEtBakNlO0FBa0NoQkcsSUFBQUEsYUFBYSxFQUFFLENBQUM7QUFBRW5CLE1BQUFBO0FBQUYsS0FBRCxFQUFzQkMsSUFBdEIsRUFBNEJDLE9BQTVCLEtBQXdDO0FBQ25ELFlBQU1rQixHQUFHLEdBQUcsaUJBQUlwQixlQUFKLEVBQXFCLHFCQUFyQixFQUE0QyxJQUE1QyxDQUFaO0FBRUEsYUFBT29CLEdBQUcsR0FDSixtQ0FBdUJBLEdBQXZCLEVBQTRCLE1BQTVCLEVBQW9DLFFBQXBDLENBREksR0FFSixFQUZOO0FBR0gsS0F4Q2U7QUF5Q2hCQyxJQUFBQSxNQUFNLEVBQUUsQ0FBQztBQUFFckIsTUFBQUE7QUFBRixLQUFELEVBQXNCQyxJQUF0QixFQUE0QkMsT0FBNUIsS0FDSix1QkFBVSxpQkFBSUYsZUFBSixFQUFxQix5QkFBckIsRUFBZ0QsT0FBaEQsQ0FBVixNQUF3RSxNQUF4RSxHQUNNLFFBRE4sR0FFTTtBQTVDTTtBQURQLENBQWpCOztlQWlEZSw2QkFBWUosUUFBWixFQUFzQkUsOEJBQXRCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb250ZW50SXRlbSwgVXRpbHMgfSBmcm9tICdAYXBvbGxvc3Byb2plY3QvZGF0YS1jb25uZWN0b3Itcm9jaydcbmltcG9ydCB7IHNjaGVtYU1lcmdlIH0gZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L3NlcnZlci1jb3JlJ1xuaW1wb3J0IEFwb2xsb3NDb25maWcgZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L2NvbmZpZydcbmltcG9ydCB7XG4gICAgZ2V0LCBsb3dlckNhc2Vcbn0gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IHsgcGFyc2VSb2NrS2V5VmFsdWVQYWlycyB9IGZyb20gJy4uL3V0aWxzJ1xuXG5jb25zdCBjcmVhdGVWaWRlb1VybEZyb21HdWlkID0gKHVyaSkgPT5cbiAgICB1cmkuc3BsaXQoJy0nKS5sZW5ndGggPT09IDVcbiAgICAgICAgPyBgJHtBcG9sbG9zQ29uZmlnLlJPQ0suRklMRV9VUkx9P2d1aWQ9JHt1cml9YFxuICAgICAgICA6IFV0aWxzLmVuZm9yY2VQcm90b2NvbCh1cmkpO1xuXG5jb25zdCByZXNvbHZlciA9IHtcbiAgICBXZWJzaXRlQ29udGVudEl0ZW06IHtcbiAgICAgICAgLi4uQ29udGVudEl0ZW0ucmVzb2x2ZXIuQ29udGVudEl0ZW0sXG4gICAgICAgIHRpdGxlOiAoeyB0aXRsZSwgYXR0cmlidXRlVmFsdWVzIH0sIGFyZ3MsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRpdGxlT3ZlcnJpZGUgPSBnZXQoYXR0cmlidXRlVmFsdWVzLCAndGl0bGVPdmVycmlkZS52YWx1ZScsICcnKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRpdGxlT3ZlcnJpZGUgPT09ICcnXG4gICAgICAgICAgICAgICAgPyB0aXRsZVxuICAgICAgICAgICAgICAgIDogdGl0bGVPdmVycmlkZTtcbiAgICAgICAgfSxcbiAgICAgICAgdmlkZW9zOiAocm9vdCwgYXJncywgeyBkYXRhU291cmNlczogeyBDb250ZW50SXRlbSB9IH0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHZpZGVvcyA9IENvbnRlbnRJdGVtLmdldFZpZGVvcyhyb290KTtcblxuICAgICAgICAgICAgcmV0dXJuIHZpZGVvcy5tYXAoKHZpZGVvKSA9PiB7XG4gICAgICAgICAgICAgICAgdmlkZW8uc291cmNlcyA9IHZpZGVvLnNvdXJjZXMubWFwKChzb3VyY2VzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZXMudXJpID0gY3JlYXRlVmlkZW9VcmxGcm9tR3VpZChzb3VyY2VzLnVyaSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZXM7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmlkZW87XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgY29udGVudExheW91dDogYXN5bmMgKHsgYXR0cmlidXRlVmFsdWVzIH0sIGFyZ3MsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluZWRWYWx1ZUd1aWQgPSBnZXQoYXR0cmlidXRlVmFsdWVzLCAnY29udGVudExheW91dC52YWx1ZScsICcnKTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmluZWRWYWx1ZSA9IGF3YWl0IGNvbnRleHQuZGF0YVNvdXJjZXMuRGVmaW5lZFZhbHVlLmdldERlZmluZWRWYWx1ZUJ5SWRlbnRpZmllcihkZWZpbmVkVmFsdWVHdWlkKTtcblxuICAgICAgICAgICAgcmV0dXJuIGRlZmluZWRWYWx1ZS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgaW1hZ2VBbHQ6ICh7IGF0dHJpYnV0ZVZhbHVlcyB9LCBhcmdzLCBjb250ZXh0KSA9PiBnZXQoYXR0cmlidXRlVmFsdWVzLCAnaW1hZ2VBbHQudmFsdWUnLCAnJyksXG4gICAgICAgIGltYWdlUmF0aW86IGFzeW5jICh7IGF0dHJpYnV0ZVZhbHVlcyB9LCBhcmdzLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZWZpbmVkVmFsdWVHdWlkID0gZ2V0KGF0dHJpYnV0ZVZhbHVlcywgJ2ltYWdlUmF0aW8udmFsdWUnLCAnJyk7XG4gICAgICAgICAgICBjb25zdCBkZWZpbmVkVmFsdWUgPSBhd2FpdCBjb250ZXh0LmRhdGFTb3VyY2VzLkRlZmluZWRWYWx1ZS5nZXREZWZpbmVkVmFsdWVCeUlkZW50aWZpZXIoZGVmaW5lZFZhbHVlR3VpZCk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZpbmVkVmFsdWUudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGxzVG9BY3Rpb246ICh7IGF0dHJpYnV0ZVZhbHVlcyB9LCBhcmdzLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdGEgPSBnZXQoYXR0cmlidXRlVmFsdWVzLCAnY2FsbHNUb0FjdGlvbi52YWx1ZScsIG51bGwpO1xuXG4gICAgICAgICAgICByZXR1cm4gY3RhXG4gICAgICAgICAgICAgICAgPyBwYXJzZVJvY2tLZXlWYWx1ZVBhaXJzKGN0YSwgJ2NhbGwnLCAnYWN0aW9uJylcbiAgICAgICAgICAgICAgICA6IFtdXG4gICAgICAgIH0sXG4gICAgICAgIHRhcmdldDogKHsgYXR0cmlidXRlVmFsdWVzIH0sIGFyZ3MsIGNvbnRleHQpID0+XG4gICAgICAgICAgICBsb3dlckNhc2UoZ2V0KGF0dHJpYnV0ZVZhbHVlcywgJ29wZW5MaW5rc0luTmV3VGFiLnZhbHVlJywgJ2ZhbHNlJykpID09PSAndHJ1ZSdcbiAgICAgICAgICAgICAgICA/ICdfYmxhbmsnXG4gICAgICAgICAgICAgICAgOiAnJyxcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNjaGVtYU1lcmdlKHJlc29sdmVyLCBDb250ZW50SXRlbSk7XG4iXX0=