"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dataConnectorRock = require("@apollosproject/data-connector-rock");

var _serverCore = require("@apollosproject/server-core");

var _config = _interopRequireDefault(require("@apollosproject/config"));

var _lodash = require("lodash");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createVideoUrlFromGuid = uri => uri.split('-').length === 5 ? `${_config.default.ROCK.FILE_URL}?guid=${uri}` : _dataConnectorRock.Utils.enforceProtocol(uri);

const resolver = {
  WebsiteContentItem: { ..._dataConnectorRock.ContentItem.resolver.ContentItem,
    title: ({
      title,
      attributeValues
    }, args, context) => {
      const titleOverride = (0, _lodash.get)(attributeValues, 'titleOverride.value', '');
      return titleOverride === '' ? title : titleOverride;
    },
    videos: (root, args, {
      dataSources: {
        ContentItem
      }
    }) => {
      const videos = ContentItem.getVideos(root);
      return videos.map(video => {
        video.sources = video.sources.map(sources => {
          sources.uri = createVideoUrlFromGuid(sources.uri);
          return sources;
        });
        return video;
      });
    },
    contentLayout: async ({
      attributeValues
    }, args, context) => {
      const definedValueGuid = (0, _lodash.get)(attributeValues, 'contentLayout.value', '');
      const definedValue = await context.dataSources.DefinedValue.getDefinedValueByIdentifier(definedValueGuid);
      return definedValue.value;
    },
    imageAlt: ({
      attributeValues
    }, args, context) => (0, _lodash.get)(attributeValues, 'imageAlt.value', ''),
    imageRatio: async ({
      attributeValues
    }, args, context) => {
      const definedValueGuid = (0, _lodash.get)(attributeValues, 'imageRatio.value', '');
      const definedValue = await context.dataSources.DefinedValue.getDefinedValueByIdentifier(definedValueGuid);
      return definedValue.value;
    },
    callsToAction: ({
      attributeValues
    }, args, context) => {
      console.log({
        attributeValues
      });
      const cta = (0, _lodash.get)(attributeValues, 'callsToAction.value', null);
      return cta ? (0, _utils.parseRockKeyValuePairs)(cta, 'call', 'action') : [];
    },
    target: ({
      attributeValues
    }, args, context) => (0, _lodash.lowerCase)((0, _lodash.get)(attributeValues, 'openLinksInNewTab.value', 'false')) === 'true' ? '_blank' : ''
  }
};

var _default = (0, _serverCore.schemaMerge)(resolver, _dataConnectorRock.ContentItem);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYXRhL3dlYnNpdGUtY29udGVudC1pdGVtL3Jlc29sdmVyLmpzIl0sIm5hbWVzIjpbImNyZWF0ZVZpZGVvVXJsRnJvbUd1aWQiLCJ1cmkiLCJzcGxpdCIsImxlbmd0aCIsIkFwb2xsb3NDb25maWciLCJST0NLIiwiRklMRV9VUkwiLCJVdGlscyIsImVuZm9yY2VQcm90b2NvbCIsInJlc29sdmVyIiwiV2Vic2l0ZUNvbnRlbnRJdGVtIiwiQ29udGVudEl0ZW0iLCJ0aXRsZSIsImF0dHJpYnV0ZVZhbHVlcyIsImFyZ3MiLCJjb250ZXh0IiwidGl0bGVPdmVycmlkZSIsInZpZGVvcyIsInJvb3QiLCJkYXRhU291cmNlcyIsImdldFZpZGVvcyIsIm1hcCIsInZpZGVvIiwic291cmNlcyIsImNvbnRlbnRMYXlvdXQiLCJkZWZpbmVkVmFsdWVHdWlkIiwiZGVmaW5lZFZhbHVlIiwiRGVmaW5lZFZhbHVlIiwiZ2V0RGVmaW5lZFZhbHVlQnlJZGVudGlmaWVyIiwidmFsdWUiLCJpbWFnZUFsdCIsImltYWdlUmF0aW8iLCJjYWxsc1RvQWN0aW9uIiwiY29uc29sZSIsImxvZyIsImN0YSIsInRhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUdBOzs7O0FBRUEsTUFBTUEsc0JBQXNCLEdBQUlDLEdBQUQsSUFDM0JBLEdBQUcsQ0FBQ0MsS0FBSixDQUFVLEdBQVYsRUFBZUMsTUFBZixLQUEwQixDQUExQixHQUNPLEdBQUVDLGdCQUFjQyxJQUFkLENBQW1CQyxRQUFTLFNBQVFMLEdBQUksRUFEakQsR0FFTU0seUJBQU1DLGVBQU4sQ0FBc0JQLEdBQXRCLENBSFY7O0FBS0EsTUFBTVEsUUFBUSxHQUFHO0FBQ2JDLEVBQUFBLGtCQUFrQixFQUFFLEVBQ2hCLEdBQUdDLCtCQUFZRixRQUFaLENBQXFCRSxXQURSO0FBRWhCQyxJQUFBQSxLQUFLLEVBQUUsQ0FBQztBQUFFQSxNQUFBQSxLQUFGO0FBQVNDLE1B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cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGVudEl0ZW0sIFV0aWxzIH0gZnJvbSAnQGFwb2xsb3Nwcm9qZWN0L2RhdGEtY29ubmVjdG9yLXJvY2snXG5pbXBvcnQgeyBzY2hlbWFNZXJnZSB9IGZyb20gJ0BhcG9sbG9zcHJvamVjdC9zZXJ2ZXItY29yZSdcbmltcG9ydCBBcG9sbG9zQ29uZmlnIGZyb20gJ0BhcG9sbG9zcHJvamVjdC9jb25maWcnXG5pbXBvcnQge1xuICAgIGdldCwgbG93ZXJDYXNlXG59IGZyb20gJ2xvZGFzaCdcbmltcG9ydCB7IHBhcnNlUm9ja0tleVZhbHVlUGFpcnMgfSBmcm9tICcuLi91dGlscydcblxuY29uc3QgY3JlYXRlVmlkZW9VcmxGcm9tR3VpZCA9ICh1cmkpID0+XG4gICAgdXJpLnNwbGl0KCctJykubGVuZ3RoID09PSA1XG4gICAgICAgID8gYCR7QXBvbGxvc0NvbmZpZy5ST0NLLkZJTEVfVVJMfT9ndWlkPSR7dXJpfWBcbiAgICAgICAgOiBVdGlscy5lbmZvcmNlUHJvdG9jb2wodXJpKTtcblxuY29uc3QgcmVzb2x2ZXIgPSB7XG4gICAgV2Vic2l0ZUNvbnRlbnRJdGVtOiB7XG4gICAgICAgIC4uLkNvbnRlbnRJdGVtLnJlc29sdmVyLkNvbnRlbnRJdGVtLFxuICAgICAgICB0aXRsZTogKHsgdGl0bGUsIGF0dHJpYnV0ZVZhbHVlcyB9LCBhcmdzLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0aXRsZU92ZXJyaWRlID0gZ2V0KGF0dHJpYnV0ZVZhbHVlcywgJ3RpdGxlT3ZlcnJpZGUudmFsdWUnLCAnJyk7XG5cbiAgICAgICAgICAgIHJldHVybiB0aXRsZU92ZXJyaWRlID09PSAnJ1xuICAgICAgICAgICAgICAgID8gdGl0bGVcbiAgICAgICAgICAgICAgICA6IHRpdGxlT3ZlcnJpZGU7XG4gICAgICAgIH0sXG4gICAgICAgIHZpZGVvczogKHJvb3QsIGFyZ3MsIHsgZGF0YVNvdXJjZXM6IHsgQ29udGVudEl0ZW0gfSB9KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2aWRlb3MgPSBDb250ZW50SXRlbS5nZXRWaWRlb3Mocm9vdCk7XG5cbiAgICAgICAgICAgIHJldHVybiB2aWRlb3MubWFwKCh2aWRlbykgPT4ge1xuICAgICAgICAgICAgICAgIHZpZGVvLnNvdXJjZXMgPSB2aWRlby5zb3VyY2VzLm1hcCgoc291cmNlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2VzLnVyaSA9IGNyZWF0ZVZpZGVvVXJsRnJvbUd1aWQoc291cmNlcy51cmkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2VzO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZpZGVvO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRlbnRMYXlvdXQ6IGFzeW5jICh7IGF0dHJpYnV0ZVZhbHVlcyB9LCBhcmdzLCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkZWZpbmVkVmFsdWVHdWlkID0gZ2V0KGF0dHJpYnV0ZVZhbHVlcywgJ2NvbnRlbnRMYXlvdXQudmFsdWUnLCAnJyk7XG4gICAgICAgICAgICBjb25zdCBkZWZpbmVkVmFsdWUgPSBhd2FpdCBjb250ZXh0LmRhdGFTb3VyY2VzLkRlZmluZWRWYWx1ZS5nZXREZWZpbmVkVmFsdWVCeUlkZW50aWZpZXIoZGVmaW5lZFZhbHVlR3VpZCk7XG5cbiAgICAgICAgICAgIHJldHVybiBkZWZpbmVkVmFsdWUudmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGltYWdlQWx0OiAoeyBhdHRyaWJ1dGVWYWx1ZXMgfSwgYXJncywgY29udGV4dCkgPT4gZ2V0KGF0dHJpYnV0ZVZhbHVlcywgJ2ltYWdlQWx0LnZhbHVlJywgJycpLFxuICAgICAgICBpbWFnZVJhdGlvOiBhc3luYyAoeyBhdHRyaWJ1dGVWYWx1ZXMgfSwgYXJncywgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGVmaW5lZFZhbHVlR3VpZCA9IGdldChhdHRyaWJ1dGVWYWx1ZXMsICdpbWFnZVJhdGlvLnZhbHVlJywgJycpO1xuICAgICAgICAgICAgY29uc3QgZGVmaW5lZFZhbHVlID0gYXdhaXQgY29udGV4dC5kYXRhU291cmNlcy5EZWZpbmVkVmFsdWUuZ2V0RGVmaW5lZFZhbHVlQnlJZGVudGlmaWVyKGRlZmluZWRWYWx1ZUd1aWQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGVmaW5lZFZhbHVlLnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBjYWxsc1RvQWN0aW9uOiAoeyBhdHRyaWJ1dGVWYWx1ZXMgfSwgYXJncywgY29udGV4dCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coeyBhdHRyaWJ1dGVWYWx1ZXMgfSlcblxuICAgICAgICAgICAgY29uc3QgY3RhID0gZ2V0KGF0dHJpYnV0ZVZhbHVlcywgJ2NhbGxzVG9BY3Rpb24udmFsdWUnLCBudWxsKTtcblxuICAgICAgICAgICAgcmV0dXJuIGN0YVxuICAgICAgICAgICAgICAgID8gcGFyc2VSb2NrS2V5VmFsdWVQYWlycyhjdGEsICdjYWxsJywgJ2FjdGlvbicpXG4gICAgICAgICAgICAgICAgOiBbXVxuICAgICAgICB9LFxuICAgICAgICB0YXJnZXQ6ICh7IGF0dHJpYnV0ZVZhbHVlcyB9LCBhcmdzLCBjb250ZXh0KSA9PlxuICAgICAgICAgICAgbG93ZXJDYXNlKGdldChhdHRyaWJ1dGVWYWx1ZXMsICdvcGVuTGlua3NJbk5ld1RhYi52YWx1ZScsICdmYWxzZScpKSA9PT0gJ3RydWUnXG4gICAgICAgICAgICAgICAgPyAnX2JsYW5rJ1xuICAgICAgICAgICAgICAgIDogJydcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNjaGVtYU1lcmdlKHJlc29sdmVyLCBDb250ZW50SXRlbSk7XG4iXX0=